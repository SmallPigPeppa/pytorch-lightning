name: Test App

# see: https://help.github.com/en/actions/reference/events-that-trigger-workflows
on:
  push:
    branches: [master, "release/*"]
  pull_request:
    branches: [master, "release/*"]
    types: [opened, reopened, ready_for_review, synchronize] # added `ready_for_review` since draft is skipped
    paths:
      - ".actions/*"
      - ".github/workflows/ci-tests-app.yml"
      - "requirements/ci.txt"
      - "src/lightning/app/**"
      - "src/lightning_app/*"
      - "tests/tests_app/**"
      - "requirements/app/**"
      - "setup.py"
      - "!requirements/*/docs.txt"
      - "!*.md"
      - "!**/*.md"
  schedule:
    # At the end of every day
    - cron: "0 0 * * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

defaults:
  run:
    shell: bash

jobs:
  app-pytest:
    if: github.event.pull_request.draft == false
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-20.04", "macOS-11", "windows-2022"]
        pkg-name: ["lightning"]
        python-version: ["3.8"]
        requires: ["oldest", "latest"]
        include:
          # only run Python latest, use App scope to limit dependency issues
          - { os: "macOS-12", pkg-name: "app", python-version: "3.11", requires: "latest" }
          - { os: "ubuntu-22.04", pkg-name: "app", python-version: "3.11", requires: "latest" }
          - { os: "windows-2022", pkg-name: "app", python-version: "3.11", requires: "latest" }
          # "app" installs the standalone package
          - { os: "macOS-11", pkg-name: "app", python-version: "3.9", requires: "latest" }
          - { os: "ubuntu-20.04", pkg-name: "app", python-version: "3.9", requires: "latest" }
          - { os: "windows-2022", pkg-name: "app", python-version: "3.8", requires: "latest" }
    # Timeout: https://stackoverflow.com/a/59076067/4521646
    timeout-minutes: 55
    env:
      PACKAGE_NAME: ${{ matrix.pkg-name }}
      FREEZE_REQUIREMENTS: ${{ ! (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/')) }}
      PYPI_CACHE_DIR: "_pip-wheels"
      TORCH_URL: "https://download.pytorch.org/whl/cpu/torch_stable.html"
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: basic setup
        run: pip install -q -r .actions/requirements.txt

      - name: Set min. dependencies
        if: ${{ matrix.requires == 'oldest' }}
        run: python .actions/assistant.py replace_oldest_ver

      - name: pip wheels cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.PYPI_CACHE_DIR }}
          key: pypi_wheels
      - name: List restored pkgs
        run: |
          mkdir -p $PYPI_CACHE_DIR
          ls -lh $PYPI_CACHE_DIR

      - name: Env. variables
        run: |
          # Switch coverage scope
          python -c "print('COVERAGE_SCOPE=' + str('lightning' if '${{matrix.pkg-name}}' == 'lightning' else 'pytorch_lightning'))" >> $GITHUB_ENV
          # if you install mono-package set dependency only for this subpackage
          python -c "print('EXTRA_PREFIX=' + str('' if '${{matrix.pkg-name}}' != 'lightning' else 'app-'))" >> $GITHUB_ENV

      - name: Install package & dependencies
        timeout-minutes: 20
        run: |
          pip install -e ".[${EXTRA_PREFIX}dev]" -U --prefer-binary \
            --find-links="${TORCH_URL}" --find-links="${PYPI_CACHE_DIR}"
          pip list
      - name: Dump handy wheels
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        continue-on-error: true
        uses: ./.github/actions/pip-wheels
        with:
          wheel-dir: ${{ env.PYPI_CACHE_DIR }}
          torch-url: ${{ env.TORCH_URL }}
          cache-key: "pypi_wheels"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "16"
      - name: Install Yarn
        timeout-minutes: 20
        run: npm install -g yarn

      - name: Adjust imports -> App
        if: ${{ matrix.pkg-name != 'lightning' }}
        run: |
          python .actions/assistant.py copy_replace_imports --source_dir="./tests" \
            --source_import="lightning.app,lightning.fabric,lightning.pytorch" \
            --target_import="lightning_app,lightning_fabric,pytorch_lightning" \
            --lightning_by="lightning_app"
          python .actions/assistant.py copy_replace_imports --source_dir="./examples" \
            --source_import="lightning.app,lightning.fabric,lightning.pytorch" \
            --target_import="lightning_app,lightning_fabric,pytorch_lightning" \
            --lightning_by="lightning_app"

      - name: Switch coverage scope
        run: python -c "print('COVERAGE_SCOPE=' + str('lightning' if '${{matrix.pkg-name}}' == 'lightning' else 'lightning_app'))" >> $GITHUB_ENV

      - name: Set parallel for Unix
        if: ${{ runner.os != 'windows' }}
        # on Win, tests takes even loner then with normal single thread
        run: echo "PYTEST_XDIST_ARGS=-n auto --dist=loadfile" >> $GITHUB_ENV
      - name: Tests
        working-directory: ./tests
        run: |
          set -e
          python -m coverage run --source ${{ env.COVERAGE_SCOPE }} \
            -m pytest -m "not cloud" -vvvv tests_app \
              --ignore="tests_app/components/python/test_python.py" \
              --timeout=120 --durations=50 ${PYTEST_XDIST_ARGS}
          pytest -m "not cloud" -v \
            tests_app/components/python/test_python.py \
            --timeout=120 --durations=50

      - name: Statistics
        if: success()
        working-directory: ./tests
        run: |
          coverage xml -i
          coverage report -i

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: tests/coverage.xml
          flags: ${{ env.COVERAGE_SCOPE }},cpu,pytest
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: false
# TODO: figure out why we clone and install quick-start
#      - name: Clone Quick Start Example Repo
#        uses: actions/checkout@v4
#        # TODO: this needs to be git submodule
#        if: matrix.os == 'windows-2022'  # because the install doesn't work on windows
#        with:
#          repository: Lightning-AI/lightning-quick-start
#          ref: 'main'
#          path: lightning-quick-start
#
#      - name: Lightning Install quick-start
#        if: matrix.os != 'windows-2022'  # because the install doesn't work on windows
#        run: |
#          python -m lightning install app lightning/quick-start -y
